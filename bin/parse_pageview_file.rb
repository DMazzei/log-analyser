#!/usr/bin/env ruby

require 'optparse'
require_relative '../config/environment'
require_relative 'display_output'

options = {
    file: nil,
    lines: 0,
    unique: false,
    page: nil
}

options_parser = OptionParser.new do |opts|
  opts.banner = "\nUsage: ./bin/parse_file [ARGUMENTS] [OPTIONS]"
  opts.version = '0.0.1'

  opts.separator "\nArguments:"
  opts.on('-f', '--file FILE', 'Local path to the log file') { |arg| options[:file] = arg }

  options[:lines] = 0
  opts.on('-l', '--lines LINES', Integer, "Number of lines to result (default #{options[:lines]} - unlimited)") do |arg|
    options[:lines] = arg.to_i
  end

  opts.separator 'Options:'
  opts.on('-u', '--unique', 'Aggregate pageviews count generated by the same IP (optional)') do
    options[:unique] = true
  end

  opts.on('-p', '--page PAGE', 'View counts for specific page (optional)') { |arg| options[:page] = arg }

  opts.separator "\n\nHelp:"
  opts.on('-h', '--help', 'Displays usage') do |_|
    puts opts
    exit
  end
end

display = DisplayOutput.new
begin
  options_parser.parse!

  if options[:file].nil? || options[:file].empty?
    raise OptionParser::MissingArgument.new('file path')
  end

  log_aggregator = PageviewsLogAggregator.new(options[:file])

  pageview_list = log_aggregator.all
  unique_pageview_list = options[:unique] ? log_aggregator.unique : []

  if options[:page].nil? || options[:page].empty?
    display.print_table('All pageviews', pageview_list)
    display.print_table('Unique pageviews', unique_pageview_list) if unique_pageview_list.any?
  else
    raise "No pageview found for: [#{options[:page]}]" unless pageview_list.has_key?(options[:page])

    display.print_header("View count for page: #{options[:page]}")
    display.print_table('All pageviews', pageview_list.select {|k, _| k == options[:page]})
    display.print_table('Unique pageviews', unique_pageview_list
                                               .select {|k, _| k == '/about'}) if unique_pageview_list.any?
  end

rescue OptionParser::InvalidOption, OptionParser::MissingArgument,
    OptionParser::InvalidArgument, OptionParser::NeedlessArgument
  puts $!.to_s
  puts options_parser
  exit 1
rescue StandardError => e
 display.print_error(e)
end
